import math
import numpy as np


def line_2p(p1, p2):
    # return line: ax + by + c = 0
    a = 0
    b = 0
    c = 0

    if abs(p1[0] - p2[0]) < 1e-5:   # symmetrical to x ras
        a = 1
        b = 0
        c = -1 * p1[0]
    else:
        a = (p1[1] - p2[1])/(p1[0] - p2[0])
        b = -1
        c = p1[1] - a * p1[0]

    return a, b, c


def distance_of_2points(p1, p2):
    dist = np.linalg.norm([p1[0] - p2[0], p1[1] - p2[1]])
    # return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5
    return dist


def vertical_point_of_point_to_line(p, a, b, c):
    # return the vertical point of a line: ax + by + c = 0

    vp_x = (b ** 2 * p[0] - a * b * p[1] - a * c)/(a ** 2 + b ** 2)
    vp_y = (a ** 2 * p[1] - a * b * p[0] - b * c)/(a ** 2 + b ** 2)

    return [vp_x, vp_y]


def vertical_line_of_point_to_line(p, a, b, c):
    # line: ax + by +c = 0
    vertical_point = vertical_point_of_point_to_line(p, a, b, c)
    va, vb, vc = line_2p(vertical_point, p)
    return va, vb, vc


def symmetrical_point_of_point_to_line(p, a, b, c):
    # line: ax + by + c = 0

    spx = 0
    spy = 0

    if a == 0 and b == 0:
        spx = p[0]
        spy = p[1]
    else:
        spx = p[0] - 2 * a * (a * p[0] + b * p[1] + c) / (a ** 2 + b ** 2)
        spy = p[1] - 2 * b * (a * p[0] + b * p[1] + c) / (a ** 2 + b ** 2)

    return [spx, spy]


def direction_in_degrees_of_line(a, b, c=0):
    # line: ax + by + c = 0
    direction = 0
    if b == 0:
        direction = math.degrees(0.5 * math.pi)
    else:
        direction = math.degrees(math.atan2(-1 * a / b, 1))

    return direction


def distance_of_point_to_2points_line(p1, p2, p3):
    la, lb, lc = line_2p(p2, p3)
    vp = vertical_point_of_point_to_line(p1, la, lb, lc)
    distance = distance_of_2points(p1, vp)
    return distance


def middle_point_of_2points(p1, p2):
    mx = 0.5 * (p1[0] + p2[0])
    my = 0.5 * (p1[1] + p2[1])
    return mx, my


def vertical_line_of_2points_through_middle_point(p1, p2):
    la, lb, lc = line_2p(p1, p2)
    mx, my = middle_point_of_2points(p1, p2)
    lv_a = -1 / la
    lv_b = -1
    lv_c = my - lv_a * mx
    return lv_a, lv_b, lv_c


def interaction_point_of_2lines(l1, l2):
    x_int = 0
    y_int = 0

    if l1[0] * l2[1] - l1[1] * l2[0] < 1e-5:
        x_int = 1e-5
        y_int = 1e-5
    else:
        x_int = (l1[1] * l2[2] - l1[2] * l2[1]) / (l1[0] * l2[1] - l1[1] * l2[0])
        y_int = (l1[2] * l2[0] - l1[0] * l2[2]) / (l1[0] * l2[1] - l1[1] * l2[0])

    return x_int, y_int


def directions_of_2points(p1, p2):
    directions = math.atan2(p2[1] - p1[1], p2[0] - p1[0])
    directions = math.degrees(directions)
    return directions


def cycle(p1, r):
    t = np.arange(0, 2 * math.pi, 0.001)
    x = [p1[1] + r * math.cos(x) for x in t]
    y = [p1[1] + r * math.sin(y) for y in t]
    return x, y

def test_2d_functions():

    p1 = [1, 1]
    p2 = [2, 2]

    print('p1:[{}, {}], p2:[{}, {}]'.format(p1[0], p1[1], p2[0], p2[1]))

    a, b, c = line_2p(p1, p2)
    print('the line function is {}*x + {}*y + {} = 0'.format(a, b, c))

    line_direction = direction_in_degrees_of_line(a, b, c)
    print('the direction of line: {}*x + {}*y + {} is {} degrees'.format(a, b, c, line_direction))

    test_point = [3, 9]

    # line: ax + by +c = 0
    vertical_point = vertical_point_of_point_to_line(test_point, a, b, c)
    print('the vertical point of [{}, {}] in line: {}*x + {}*y + {} is [{}, {}]'.format(test_point[0], test_point[1], a, b, c, vertical_point[0], vertical_point[1]))

    # line: ax + by +c = 0
    symmetrical_point = symmetrical_point_of_point_to_line(test_point, a, b, c)
    print('the symmetrical point of [{}, {}] to line: {}*x + {}*y + {} is [{}, {}]'.format(test_point[0], test_point[1], a, b, c, symmetrical_point[0], symmetrical_point[1]))

    p1 = [4, 0]
    p2 = [1, 2]
    p3 = [2, 4]
    distance = distance_of_point_to_2points_line(p1, p2, p3)
    print('the distance is {}'.format(distance))
    print('square root of 8 is {}'.format(math.sqrt(8)))

    a = [1, 3]
    b = [-5, 1]
    la, lb, lc = vertical_line_of_2points_through_middle_point(a, b)
    print('the vertical line function is line: {}*x + {}*y + {} = 0'.format(la, lb, lc))

    l1 = [1, 0, -2]
    l2 = [0, 1, -2]
    x_int, y_int = interaction_point_of_2lines(l1, l2)
    print('the interaction point of 2 lines is [{}, {}]'.format(x_int, y_int))

    sp = symmetrical_point_of_point_to_line([2, 3], 1, 1, 1)
    print('the symmetrical point of [{}, {}] to line: {}*x + {}*y + {} is [{}, {}]'.format(2, 3,
                                                                                           1, 1, 1,
                                                                                           sp[0],
                                                                                           sp[1]))
    a, b, c = line_2p(sp, [3, -2])
    print('the line function is {}*x + {}*y + {} = 0'.format(a, b, c))


def verify_track_line():
    waypoints = [[3.2095088958740234, 0.6831344813108444],
                 [3.359275460243225, 0.6833638250827789],
                 [3.5090349912643433, 0.6834017932415009],
                 [3.6587949991226196, 0.6834610402584076],
                 [3.808555006980896, 0.6835170090198517],
                 [3.9583150148391724, 0.6835691034793854],
                 [4.1080756187438965, 0.6836211383342743],
                 [4.2578349113464355, 0.6836741119623184],
                 [4.407594919204712, 0.683727964758873],
                 [4.557354927062988, 0.6837812215089798],
                 [4.7071144580841064, 0.6838362663984299],
                 [4.856873989105225, 0.6838938742876053],
                 [5.006633043289185, 0.6839521080255508],
                 [5.156393527984619, 0.6840048730373383],
                 [5.306154489517212, 0.6840500980615616],
                 [5.455911874771118, 0.6841173022985458],
                 [5.605645418167114, 0.6843366473913193],
                 [5.75542140007019, 0.6842880994081497],
                 [5.905304670333862, 0.6835954934358597],
                 [6.055286169052124, 0.6823406517505646],
                 [6.204955101013184, 0.6861690580844879],
                 [6.354061603546143, 0.6985173225402832],
                 [6.502514362335205, 0.7188082784414291],
                 [6.643739938735962, 0.7683110386133194],
                 [6.77488899230957, 0.8412670791149139],
                 [6.89846134185791, 0.9262270629405975],
                 [7.0100367069244385, 1.0257667303085327],
                 [7.0997467041015625, 1.1460862159729004],
                 [7.172473669052124, 1.2770325541496277],
                 [7.230445146560669, 1.4172040224075317],
                 [7.272417068481445, 1.565867006778717],
                 [7.283682584762573, 1.7152734994888306],
                 [7.265743970870972, 1.8636599779129024],
                 [7.233960151672363, 2.010729968547821],
                 [7.1842029094696045, 2.154710531234741],
                 [7.114001989364624, 2.2871004343032837],
                 [7.0233659744262695, 2.406221032142639],
                 [6.917426347732544, 2.512663960456848],
                 [6.79807996749878, 2.604923009872436],
                 [6.6672019958496085, 2.6775895357131962],
                 [6.526654481887817, 2.729645013809204],
                 [6.380491495132446, 2.7596704959869385],
                 [6.229795932769775, 2.7700384855270386],
                 [6.079286813735961, 2.7733629941940308],
                 [5.929529666900635, 2.7721140384674072],
                 [5.7797839641571045, 2.7707979679107666],
                 [5.630027532577515, 2.769605040550232],
                 [5.48030161857605, 2.7690484523773193],
                 [5.330573081970215, 2.768457531929016],
                 [5.180745601654053, 2.765363574028015],
                 [5.031071662902832, 2.766121029853821],
                 [4.8823630809783936, 2.7846319675445557],
                 [4.735179901123047, 2.821260929107666],
                 [4.596354961395264, 2.878996968269348],
                 [4.471064329147339, 2.959028959274292],
                 [4.358901500701904, 3.0601580142974854],
                 [4.255730390548706, 3.1701360940933228],
                 [4.16035795211792, 3.2856805324554443],
                 [4.066727519035339, 3.4024704694747925],
                 [3.9719725847244263, 3.518454909324646],
                 [3.8773505687713623, 3.6345274448394775],
                 [3.7827706336975098, 3.7506459951400757],
                 [3.6881529092788696, 3.86673903465271],
                 [3.5935609340667725, 3.9826358556747437],
                 [3.4988315105438232, 4.09949803352356],
                 [3.4035515785217285, 4.217398405075073],
                 [3.294981002807617, 4.319329500198364],
                 [3.1679095029830933, 4.398614168167114],
                 [3.0387414693832397, 4.461370468139648],
                 [2.854969024658203, 4.497744560241699],
                 [2.797850012779234, 4.495018482208252],
                 [2.633301019668579, 4.497664451599121],
                 [2.4294214248657227, 4.4980690479278564],
                 [2.2890069484710693, 4.492910385131836],
                 [2.1444239616394043, 4.488077163696289],
                 [1.99241304397583, 4.483960390090942],
                 [1.842801034450531, 4.479875564575195],
                 [1.6925734877586365, 4.4749414920806885],
                 [1.539882481098175, 4.468656063079834],
                 [1.3862689733505262, 4.457833528518677],
                 [1.2433670163154602, 4.418424367904663],
                 [1.1135604083538055, 4.345951080322266],
                 [0.9965091645717638, 4.250534892082216],
                 [0.8920779228210449, 4.136229991912842],
                 [0.8050850629806519, 4.006568551063538],
                 [0.7456648498773575, 3.8689799308776855],
                 [0.7141403257846834, 3.723703503608705],
                 [0.7072480469942093, 3.572937488555908],
                 [0.714956521987915, 3.4234429597854614],
                 [0.7365620285272598, 3.275694489479065],
                 [0.7720642238855366, 3.129692554473875],
                 [0.8129126578569412, 2.9843615293502808],
                 [0.8494300991296768, 2.838486909866333],
                 [0.8816098272800446, 2.692067503929138],
                 [0.9119606614112854, 2.5454180240631104],
                 [0.942350447177887, 2.3987735509872437],
                 [0.9727316200733185, 2.2521289587020874],
                 [1.0031171143054962, 2.1054846048355103],
                 [1.0335085093975067, 1.958836555480957],
                 [1.063848465681076, 1.8122150301933289],
                 [1.0942798256874084, 1.6655445098876953],
                 [1.125132828950882, 1.518646478652954],
                 [1.1569859981536865, 1.3717305064201355],
                 [1.1986910104751587, 1.2280805110931396],
                 [1.2531161606311798, 1.0885401666164398],
                 [1.3394269943237305, 0.9674179255962372],
                 [1.440102458000183, 0.8561052978038788],
                 [1.5720524787902832, 0.7863914519548416],
                 [1.7143170237541199, 0.7385813295841217],
                 [1.862565040588379, 0.7073544710874557],
                 [2.011545956134796, 0.6859170347452164],
                 [2.1608630418777466, 0.6737564653158188],
                 [2.3105164766311646, 0.6708721071481705],
                 [2.4604655504226685, 0.6761422604322433],
                 [2.610395073890686, 0.6808701455593109],
                 [2.760238528251648, 0.6832202970981598],
                 [2.909994959831238, 0.6831925511360168],
                 [3.059733510017395, 0.6826554089784622]]

    # episode,steps,X,Y,yaw,steer,throttle,action,reward,done,all_wheels_on_track,progress,closest_waypoint,track_len,tstamp,episode_status,pause_duration
    pos = {
        'episode': 0,
        'steps': 1,
        'x': 2,
        'X': 2,
        'y': 3,
        'Y': 3,
        'yam': 4,
        'steer': 5,
        'throttle': 6,
        'action': 7,
        'reward': 8,
        'done': 9,
        'all_wheels_on_track': 10,
        'progress': 11,
        'closest_waypoint': 12,
        'track_len': 13,
        'tstamp': 14,
        'episode_status': 15,
        'pause_duration': 16
    }

    p1 = [20,1.0,3.1998513092635985,0.6830428842266222,0.17619313472628523,24.082622965124955,0.538540105621438,'[24.082622965124955, 0.538540105621438]',0.0,False,True,0.791219497405775,1,17.709159380834848,79.356,'prepare',0.0]
    p2 = [20,2.0,3.1997327938476157,0.6831032114197831,0.18326595495146542,-30.0,1.0679182560990825,'[-30.0, 1.0679182560990825]',0.7619998019496896,False,True,0.7905513581379275,1,17.709159380834848,79.424,'in_progress',0.0]
    p3 = [20,3.0,3.209898718873236,0.6830912920308669,0.1333237015307495,30.0,2.0,'[30.0, 2.0]',0.7619994605221163,False,True,0.8479561633145107,1,17.709159380834848,79.462,'in_progress',0.0]

    s = p1[pos['track_len']] * p1[pos['progress']] / 100
    print('the trace length is {}'.format(p1[pos['track_len']]))
    print('the progress is {}'.format(p1[pos['progress']]))
    print('the s is {}'.format(s))

    closest_waypoint = p1[pos['closest_waypoint']] - 1
    waypoint = [waypoints[closest_waypoint][0], waypoints[closest_waypoint][1]]
    distance = distance_of_2points([p1[pos['x']], p1[pos['y']]], waypoint)
    print('the distance to waypoints[{}] is {}'.format(closest_waypoint, distance))

    speed = p1[pos['throttle']]
    print('the speed is {}'.format(speed))
    t = p2[pos['tstamp']] - p1[pos['tstamp']]
    s1 = speed * t
    print('the distance from speed {} multiply time {} is {}'.format(speed, t, s1))
    heading = p1[pos['yam']]
    s1_x = s1 * math.cos(math.radians(heading))
    s1_y = s1 * math.sin(math.radians(heading))

    nx = p1[pos['x']] + s1_x
    ny = p1[pos['y']] + s1_y

    print('the new point is [{}, {}]'.format(nx, ny))

    omega = math.radians(p1[pos['steer']])
    r = abs(speed / omega)
    print('the turning radius is {}'.format(r))

    angel_change = omega * t


def directions_of_next_n_points(waypoints, n=10):
    length = len(waypoints)

    directions_all = []

    for i in range(length):
        p1 = waypoints[i]
        directions_n = []
        for j in range(n+1):
            if j == 0:
                directions_n.append(0.0)
            else:
                p2 = waypoints[divmod(i+j, length)[1]]
                d = directions_of_2points(p1, p2)
                d = round(d, 3)
                if abs(d) <= 0.999:
                    d = 0.0
                if 180 - d <= 0.999:
                    d = 180
                if 180 + d <= 0.999:
                    d = -180
                directions_n.append(d)
        directions_all.append(directions_n)
    return directions_all


if __name__ == '__main__':

    waypoints = [[3.2095088958740234, 0.6831344813108444],
                 [3.359275460243225, 0.6833638250827789],
                 [3.5090349912643433, 0.6834017932415009],
                 [3.6587949991226196, 0.6834610402584076],
                 [3.808555006980896, 0.6835170090198517],
                 [3.9583150148391724, 0.6835691034793854],
                 [4.1080756187438965, 0.6836211383342743],
                 [4.2578349113464355, 0.6836741119623184],
                 [4.407594919204712, 0.683727964758873],
                 [4.557354927062988, 0.6837812215089798],
                 [4.7071144580841064, 0.6838362663984299],
                 [4.856873989105225, 0.6838938742876053],
                 [5.006633043289185, 0.6839521080255508],
                 [5.156393527984619, 0.6840048730373383],
                 [5.306154489517212, 0.6840500980615616],
                 [5.455911874771118, 0.6841173022985458],
                 [5.605645418167114, 0.6843366473913193],
                 [5.75542140007019, 0.6842880994081497],
                 [5.905304670333862, 0.6835954934358597],
                 [6.055286169052124, 0.6823406517505646],
                 [6.204955101013184, 0.6861690580844879],
                 [6.354061603546143, 0.6985173225402832],
                 [6.502514362335205, 0.7188082784414291],
                 [6.643739938735962, 0.7683110386133194],
                 [6.77488899230957, 0.8412670791149139],
                 [6.89846134185791, 0.9262270629405975],
                 [7.0100367069244385, 1.0257667303085327],
                 [7.0997467041015625, 1.1460862159729004],
                 [7.172473669052124, 1.2770325541496277],
                 [7.230445146560669, 1.4172040224075317],
                 [7.272417068481445, 1.565867006778717],
                 [7.283682584762573, 1.7152734994888306],
                 [7.265743970870972, 1.8636599779129024],
                 [7.233960151672363, 2.010729968547821],
                 [7.1842029094696045, 2.154710531234741],
                 [7.114001989364624, 2.2871004343032837],
                 [7.0233659744262695, 2.406221032142639],
                 [6.917426347732544, 2.512663960456848],
                 [6.79807996749878, 2.604923009872436],
                 [6.6672019958496085, 2.6775895357131962],
                 [6.526654481887817, 2.729645013809204],
                 [6.380491495132446, 2.7596704959869385],
                 [6.229795932769775, 2.7700384855270386],
                 [6.079286813735961, 2.7733629941940308],
                 [5.929529666900635, 2.7721140384674072],
                 [5.7797839641571045, 2.7707979679107666],
                 [5.630027532577515, 2.769605040550232],
                 [5.48030161857605, 2.7690484523773193],
                 [5.330573081970215, 2.768457531929016],
                 [5.180745601654053, 2.765363574028015],
                 [5.031071662902832, 2.766121029853821],
                 [4.8823630809783936, 2.7846319675445557],
                 [4.735179901123047, 2.821260929107666],
                 [4.596354961395264, 2.878996968269348],
                 [4.471064329147339, 2.959028959274292],
                 [4.358901500701904, 3.0601580142974854],
                 [4.255730390548706, 3.1701360940933228],
                 [4.16035795211792, 3.2856805324554443],
                 [4.066727519035339, 3.4024704694747925],
                 [3.9719725847244263, 3.518454909324646],
                 [3.8773505687713623, 3.6345274448394775],
                 [3.7827706336975098, 3.7506459951400757],
                 [3.6881529092788696, 3.86673903465271],
                 [3.5935609340667725, 3.9826358556747437],
                 [3.4988315105438232, 4.09949803352356],
                 [3.4035515785217285, 4.217398405075073],
                 [3.294981002807617, 4.319329500198364],
                 [3.1679095029830933, 4.398614168167114],
                 [3.0387414693832397, 4.461370468139648],
                 [2.854969024658203, 4.497744560241699],
                 [2.797850012779234, 4.495018482208252],
                 [2.633301019668579, 4.497664451599121],
                 [2.4294214248657227, 4.4980690479278564],
                 [2.2890069484710693, 4.492910385131836],
                 [2.1444239616394043, 4.488077163696289],
                 [1.99241304397583, 4.483960390090942],
                 [1.842801034450531, 4.479875564575195],
                 [1.6925734877586365, 4.4749414920806885],
                 [1.539882481098175, 4.468656063079834],
                 [1.3862689733505262, 4.457833528518677],
                 [1.2433670163154602, 4.418424367904663],
                 [1.1135604083538055, 4.345951080322266],
                 [0.9965091645717638, 4.250534892082216],
                 [0.8920779228210449, 4.136229991912842],
                 [0.8050850629806519, 4.006568551063538],
                 [0.7456648498773575, 3.8689799308776855],
                 [0.7141403257846834, 3.723703503608705],
                 [0.7072480469942093, 3.572937488555908],
                 [0.714956521987915, 3.4234429597854614],
                 [0.7365620285272598, 3.275694489479065],
                 [0.7720642238855366, 3.129692554473875],
                 [0.8129126578569412, 2.9843615293502808],
                 [0.8494300991296768, 2.838486909866333],
                 [0.8816098272800446, 2.692067503929138],
                 [0.9119606614112854, 2.5454180240631104],
                 [0.942350447177887, 2.3987735509872437],
                 [0.9727316200733185, 2.2521289587020874],
                 [1.0031171143054962, 2.1054846048355103],
                 [1.0335085093975067, 1.958836555480957],
                 [1.063848465681076, 1.8122150301933289],
                 [1.0942798256874084, 1.6655445098876953],
                 [1.125132828950882, 1.518646478652954],
                 [1.1569859981536865, 1.3717305064201355],
                 [1.1986910104751587, 1.2280805110931396],
                 [1.2531161606311798, 1.0885401666164398],
                 [1.3394269943237305, 0.9674179255962372],
                 [1.440102458000183, 0.8561052978038788],
                 [1.5720524787902832, 0.7863914519548416],
                 [1.7143170237541199, 0.7385813295841217],
                 [1.862565040588379, 0.7073544710874557],
                 [2.011545956134796, 0.6859170347452164],
                 [2.1608630418777466, 0.6737564653158188],
                 [2.3105164766311646, 0.6708721071481705],
                 [2.4604655504226685, 0.6761422604322433],
                 [2.610395073890686, 0.6808701455593109],
                 [2.760238528251648, 0.6832202970981598],
                 [2.909994959831238, 0.6831925511360168],
                 [3.059733510017395, 0.6826554089784622]]

    #test_2d_functions()
    # verify_track_line()

    directions_of_next_3_points = directions_of_next_n_points(waypoints, n=3)
    print(directions_of_next_3_points)
