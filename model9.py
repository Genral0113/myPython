import math


class Reward:
    def __init__(self, verbose=False):
        self.first_racingpoint_index = 0
        self.verbose = verbose
        self.track_length = 17.71
        self.standard_speed = 1.7
        self.optimal_speed = 2.5
        self.maximum_speed = 3.0
        self.multiply_factor = 2
        self.steps_per_second = 15
        self.laps = 3

    def reward_function(self, params):

        ################## HELPER FUNCTIONS ###################

        def dist_2_points(x1, x2, y1, y2):
            return abs(abs(x1 - x2) ** 2 + abs(y1 - y2) ** 2) ** 0.5

        def closest_2_racing_points_index(racing_coords, car_coords):

            # Calculate all distances to racing points
            distances = []
            for i in range(len(racing_coords)):
                distance = dist_2_points(x1=racing_coords[i][0], x2=car_coords[0],
                                         y1=racing_coords[i][1], y2=car_coords[1])
                distances.append(distance)

            # Get index of the closest racing point
            closest_index = distances.index(min(distances))

            # Get index of the second closest racing point
            distances_no_closest = distances.copy()
            distances_no_closest[closest_index] = 999
            second_closest_index = distances_no_closest.index(
                min(distances_no_closest))

            return [closest_index, second_closest_index]

        def dist_to_racing_line(closest_coords, second_closest_coords, car_coords):

            # Calculate the distances between 2 closest racing points
            a = abs(dist_2_points(x1=closest_coords[0],
                                  x2=second_closest_coords[0],
                                  y1=closest_coords[1],
                                  y2=second_closest_coords[1]))

            # Distances between car and closest and second closest racing point
            b = abs(dist_2_points(x1=car_coords[0],
                                  x2=closest_coords[0],
                                  y1=car_coords[1],
                                  y2=closest_coords[1]))
            c = abs(dist_2_points(x1=car_coords[0],
                                  x2=second_closest_coords[0],
                                  y1=car_coords[1],
                                  y2=second_closest_coords[1]))

            # Calculate distance between car and racing line (goes through 2 closest racing points)
            # try-except in case a=0 (rare bug in DeepRacer)
            try:
                distance = abs(-(a ** 4) + 2 * (a ** 2) * (b ** 2) + 2 * (a ** 2) * (c ** 2) -
                               (b ** 4) + 2 * (b ** 2) * (c ** 2) - (c ** 4)) ** 0.5 / (2 * a)
            except:
                distance = b

            return distance

        # Calculate which one of the closest racing points is the next one and which one the previous one
        def next_prev_racing_point(closest_coords, second_closest_coords, car_coords, heading):

            # Virtually set the car more into the heading direction
            heading_vector = [math.cos(math.radians(
                heading)), math.sin(math.radians(heading))]
            new_car_coords = [car_coords[0] + heading_vector[0],
                              car_coords[1] + heading_vector[1]]

            # Calculate distance from new car coords to 2 closest racing points
            distance_closest_coords_new = dist_2_points(x1=new_car_coords[0],
                                                        x2=closest_coords[0],
                                                        y1=new_car_coords[1],
                                                        y2=closest_coords[1])
            distance_second_closest_coords_new = dist_2_points(x1=new_car_coords[0],
                                                               x2=second_closest_coords[0],
                                                               y1=new_car_coords[1],
                                                               y2=second_closest_coords[1])

            if distance_closest_coords_new <= distance_second_closest_coords_new:
                next_point_coords = closest_coords
                prev_point_coords = second_closest_coords
            else:
                next_point_coords = second_closest_coords
                prev_point_coords = closest_coords

            return [next_point_coords, prev_point_coords]

        def racing_direction_diff(closest_coords, second_closest_coords, car_coords, heading):

            # Calculate the direction of the center line based on the closest waypoints
            next_point, prev_point = next_prev_racing_point(closest_coords,
                                                            second_closest_coords,
                                                            car_coords,
                                                            heading)

            # Calculate the direction in radius, arctan2(dy, dx), the result is (-pi, pi) in radians
            track_direction = math.atan2(
                next_point[1] - prev_point[1], next_point[0] - prev_point[0])

            # Convert to degree
            track_direction = math.degrees(track_direction)

            # Calculate the difference between the track direction and the heading direction of the car
            direction_diff = abs(track_direction - heading)
            if direction_diff > 180:
                direction_diff = 360 - direction_diff

            return direction_diff

        # Gives back indexes that lie between start and end index of a cyclical list
        # (start index is included, end index is not)
        def indexes_cyclical(start, end, array_len):

            if end < start:
                end += array_len

            return [index % array_len for index in range(start, end)]

        # Calculate how long car would take for entire lap, if it continued like it did until now
        def projected_time(first_index, closest_index, step_count, times_list):

            # Calculate how much time has passed since start
            current_actual_time = (step_count - 1) / self.steps_per_second

            # Calculate which indexes were already passed
            indexes_traveled = indexes_cyclical(first_index, closest_index, len(times_list))

            # Calculate how much time should have passed if car would have followed optimals
            current_expected_time = sum([times_list[i] for i in indexes_traveled])

            # Calculate how long one entire lap takes if car follows optimals
            total_expected_time = sum(times_list)

            # Calculate how long car would take for entire lap, if it continued like it did until now
            try:
                projected_time = (current_actual_time / current_expected_time) * total_expected_time
            except:
                projected_time = 9999

            return projected_time

        #################### RACING LINE ######################

        # Optimal racing line for the Spain track
        # Each row: [x,y,speed,timeFromPreviousPoint]
        ############### OPTIMAL X,Y,SPEED,TIME ################
        racing_track = [[3.2095088958740234, 0.6831344813108444, 2.988460117480557, 0.02505751023660828],
                        [3.2843921780586243, 0.6832491531968117, 2.988460117480557, 0.02505751023660828],
                        [3.359275460243225, 0.6833638250827789, 2.9996834961489034, 0.024962556220743056],
                        [3.434155225753784, 0.6833828091621399, 2.9996834961489034, 0.024962556220743056],
                        [3.5090349912643433, 0.6834017932415009, 2.999229346505003, 0.02496641674839542],
                        [3.5839149951934814, 0.6834314167499542, 2.999229346505003, 0.02496641674839542],
                        [3.6587949991226196, 0.6834610402584076, 2.999312267459435, 0.02496572630023902],
                        [3.733675003051758, 0.6834890246391296, 2.999312267459435, 0.02496572630023902],
                        [3.808555006980896, 0.6835170090198517, 2.9994041821942465, 0.024964961009243353],
                        [3.883435010910034, 0.6835430562496185, 2.9994041821942465, 0.024964961009243353],
                        [3.9583150148391724, 0.6835691034793854, 2.999405549528305, 0.02496504898581044],
                        [4.033195316791534, 0.6835951209068298, 2.999405549528305, 0.02496504898581044],
                        [4.1080756187438965, 0.6836211383342743, 2.9993838967528736, 0.024965010669977937],
                        [4.182955265045166, 0.6836476251482964, 2.9993838967528736, 0.024965010669977937],
                        [4.2578349113464355, 0.6836741119623184, 2.9993632837453688, 0.024965301527902637],
                        [4.332714915275574, 0.6837010383605957, 2.9993632837453688, 0.024965301527902637],
                        [4.407594919204712, 0.683727964758873, 2.9993772996985677, 0.024965184830656136],
                        [4.48247492313385, 0.6837545931339264, 2.9993772996985677, 0.024965184830656136],
                        [4.557354927062988, 0.6837812215089798, 2.9993347796920826, 0.0249654593663781],
                        [4.632234692573547, 0.6838087439537048, 2.9993347796920826, 0.0249654593663781],
                        [4.7071144580841064, 0.6838362663984299, 2.9992713920881475, 0.024965987155441224],
                        [4.7819942235946655, 0.6838650703430176, 2.9992713920881475, 0.024965987155441224],
                        [4.856873989105225, 0.6838938742876053, 2.9992554709047723, 0.024966040232121876],
                        [4.931753516197205, 0.6839229911565781, 2.9992554709047723, 0.024966040232121876],
                        [5.006633043289185, 0.6839521080255508, 2.9993887493351865, 0.024965168990508376],
                        [5.081513285636902, 0.6839784905314445, 2.9993887493351865, 0.024965168990508376],
                        [5.156393527984619, 0.6840048730373383, 2.999550958955194, 0.024963897998471655],
                        [5.2312740087509155, 0.6840274855494499, 2.999550958955194, 0.024963897998471655],
                        [5.306154489517212, 0.6840500980615616, 2.99900841636299, 0.024967819282516308],
                        [5.381033182144165, 0.6840837001800537, 2.99900841636299, 0.024967819282516308],
                        [5.455911874771118, 0.6841173022985458, 2.989439157331584, 0.025043778477363103],
                        [5.530778646469116, 0.6842269748449326, 2.989439157331584, 0.025043778477363103],
                        [5.605645418167114, 0.6843366473913193, 2.9994826528685894, 0.024966970492051724],
                        [5.680533409118652, 0.6843123733997345, 2.9994826528685894, 0.024966970492051724],
                        [5.75542140007019, 0.6842880994081497, 2.8954658787638095, 0.02588268637697547],
                        [5.830363035202026, 0.6839417964220047, 2.8954658787638095, 0.02588268637697547],
                        [5.905304670333862, 0.6835954934358597, 2.6618678525842214, 0.028173214513092727],
                        [5.980295419692993, 0.6829680725932121, 2.6618678525842214, 0.028173214513092727],
                        [6.055286169052124, 0.6823406517505646, 0.3160254747605511, 0.23687629579065325],
                        [6.130120635032654, 0.6842548549175262, 0.3160254747605511, 0.23687629579065325],
                        [6.204955101013184, 0.6861690580844879, 0.06527951913489527, 1.1459715234972967],
                        [6.279508352279663, 0.6923431903123856, 0.06527951913489527, 1.1459715234972967],
                        [6.354061603546143, 0.6985173225402832, 0.21239312748143607, 0.35272576178253306],
                        [6.428287982940674, 0.7086628004908562, 0.21239312748143607, 0.35272576178253306],
                        [6.502514362335205, 0.7188082784414291, 2.6785493503027147, 0.027934936958431716],
                        [6.5731271505355835, 0.7435596585273743, 2.6785493503027147, 0.027934936958431716],
                        [6.643739938735962, 0.7683110386133194, 2.063868946275504, 0.036357809506845085],
                        [6.709314465522766, 0.8047890588641167, 2.063868946275504, 0.036357809506845085],
                        [6.77488899230957, 0.8412670791149139, 2.996582148950612, 0.02502201990650294],
                        [6.83667516708374, 0.8837470710277557, 2.996582148950612, 0.02502201990650294],
                        [6.89846134185791, 0.9262270629405975, 1.8733082379480717, 0.03990887999344255],
                        [6.954249024391174, 0.9759968966245651, 1.8733082379480717, 0.03990887999344255],
                        [7.0100367069244385, 1.0257667303085327, 2.980107820507487, 0.025180663576367203],
                        [7.0548917055130005, 1.0859264731407166, 2.980107820507487, 0.025180663576367203],
                        [7.0997467041015625, 1.1460862159729004, 0.9112857306235168, 0.08218444930299829],
                        [7.136110186576843, 1.211559385061264, 0.9112857306235168, 0.08218444930299829],
                        [7.172473669052124, 1.2770325541496277, 0.0390826845511614, 1.94058185625786],
                        [7.2014594078063965, 1.3471182882785797, 0.0390826845511614, 1.94058185625786],
                        [7.230445146560669, 1.4172040224075317, 1.186583917835759, 0.06509204650061187],
                        [7.251431107521057, 1.4915355145931244, 1.186583917835759, 0.06509204650061187],
                        [7.272417068481445, 1.565867006778717, 1.946025655169095, 0.03849656615857713],
                        [7.278049826622009, 1.6405702531337738, 1.946025655169095, 0.03849656615857713],
                        [7.283682584762573, 1.7152734994888306, 2.6380953650008676, 0.028328554253644393],
                        [7.2747132778167725, 1.7894667387008665, 2.6380953650008676, 0.028328554253644393],
                        [7.265743970870972, 1.8636599779129024, 0.2788616603867861, 0.2697847670078336],
                        [7.2498520612716675, 1.9371949732303617, 0.2788616603867861, 0.2697847670078336],
                        [7.233960151672363, 2.010729968547821, 1.8848286990549923, 0.04041103735640296],
                        [7.209081530570984, 2.082720249891281, 1.8848286990549923, 0.04041103735640296],
                        [7.1842029094696045, 2.154710531234741, 0.37534382783802145, 0.19961801250234862],
                        [7.149102449417114, 2.2209054827690125, 0.37534382783802145, 0.19961801250234862],
                        [7.114001989364624, 2.2871004343032837, 0.09639220544124423, 0.7764200175311899],
                        [7.068683981895447, 2.3466607332229614, 0.09639220544124423, 0.7764200175311899],
                        [7.0233659744262695, 2.406221032142639, 2.924875016401751, 0.025672475866255953],
                        [6.970396161079407, 2.4594424962997437, 2.924875016401751, 0.025672475866255953],
                        [6.917426347732544, 2.512663960456848, 1.810253697492365, 0.041665035373998946],
                        [6.857753157615662, 2.5587934851646423, 1.8102536974927732, 0.041665035373989016],
                        [6.79807996749878, 2.604923009872436, 2.959996377774701, 0.025286841861263572],
                        [6.732640981674194, 2.641256272792816, 2.959996377774701, 0.025286841861263572],
                        [6.6672019958496085, 2.6775895357131962, 2.5659035594243123, 0.02920567129931087],
                        [6.596928238868713, 2.7036172747612, 2.5659035594241795, 0.029205671299312765],
                        [6.526654481887817, 2.729645013809204, 0.9332100377477864, 0.0799472259015812],
                        [6.453572988510132, 2.7446577548980713, 0.9332100377477864, 0.0799472259015812],
                        [6.380491495132446, 2.7596704959869385, 2.9726988271252095, 0.02540650996783711],
                        [6.305143713951111, 2.7648544907569885, 2.9726988271252095, 0.02540650996783711],
                        [6.229795932769775, 2.7700384855270386, 2.832096043505201, 0.026578517962672812],
                        [6.154541373252869, 2.7717007398605347, 2.8320960435052296, 0.026578517962672858],
                        [6.079286813735961, 2.7733629941940308, 2.6995245713722795, 0.02773865376140999],
                        [6.004408240318298, 2.772738516330719, 2.6995245713722795, 0.027738653761410315],
                        [5.929529666900635, 2.7721140384674072, 2.732279262072945, 0.02740413251079727],
                        [5.85465681552887, 2.771456003189087, 2.732279262072945, 0.02740413251079727],
                        [5.7797839641571045, 2.7707979679107666, 2.6708592578435524, 0.02803614274416586],
                        [5.70490574836731, 2.7702015042304993, 2.6708592578435524, 0.02803614274416586],
                        [5.630027532577515, 2.769605040550232, 2.2628597264830543, 0.0330835682765829],
                        [5.555164575576782, 2.7693267464637756, 2.2628597264830543, 0.0330835682765829],
                        [5.48030161857605, 2.7690484523773193, 2.2885326530555004, 0.03271303611689108],
                        [5.405437350273132, 2.7687529921531677, 2.2885326530555004, 0.03271303611689108],
                        [5.330573081970215, 2.768457531929016, 2.9039118636562677, 0.025803025242112643],
                        [5.255659341812134, 2.7669105529785156, 2.9039118636562677, 0.025803025242112643],
                        [5.180745601654053, 2.765363574028015, 2.407605022422553, 0.031083972241225624],
                        [5.105908632278442, 2.765742301940918, 2.407605022422553, 0.031083972241225624],
                        [5.031071662902832, 2.766121029853821, 2.9795454380729653, 0.025147502879168886],
                        [4.956717371940613, 2.7753764986991882, 2.9795454380729653, 0.025147502879168886],
                        [4.8823630809783936, 2.7846319675445557, 2.6616592853572323, 0.02849210891928758],
                        [4.80877149105072, 2.802946448326111, 2.6616592853572323, 0.02849210891928758],
                        [4.735179901123047, 2.821260929107666, 2.8298787866937225, 0.026565148423387003],
                        [4.665767431259155, 2.850128948688507, 2.8298787866937225, 0.026565148423387003],
                        [4.596354961395264, 2.878996968269348, 2.924980365324494, 0.025413899397884243],
                        [4.533709645271301, 2.91901296377182, 2.924980365324494, 0.025413899397884243],
                        [4.471064329147339, 2.959028959274292, 2.892305674161057, 0.026107511256641035],
                        [4.414982914924622, 3.0095934867858887, 2.892305674161057, 0.026107511256641035],
                        [4.358901500701904, 3.0601580142974854, 1.0197276268409288, 0.07393938845509364],
                        [4.307315945625305, 3.115147054195404, 1.0197276268409288, 0.07393938845509364],
                        [4.255730390548706, 3.1701360940933228, 2.2323717778509717, 0.0335565277535058],
                        [4.208044171333313, 3.2279083132743835, 2.2323717778509717, 0.0335565277535058],
                        [4.16035795211792, 3.2856805324554443, 2.9888701341539745, 0.025040928585547816],
                        [4.11354273557663, 3.3440755009651184, 2.9888701341539745, 0.025040928585547816],
                        [4.066727519035339, 3.4024704694747925, 2.711393478503755, 0.02761853825718407],
                        [4.019350051879883, 3.4604626893997192, 2.711393478503755, 0.02761853825718407],
                        [3.9719725847244263, 3.518454909324646, 2.7842917146254393, 0.026892595631930166],
                        [3.9246615767478943, 3.5764911770820618, 2.7842917146254393, 0.026892595631930166],
                        [3.8773505687713623, 3.6345274448394775, 2.8098770746786683, 0.026649342279466835],
                        [3.830060601234436, 3.6925867199897766, 2.8098770746786683, 0.026649342279466835],
                        [3.7827706336975098, 3.7506459951400757, 2.7911953902457447, 0.026828441434563578],
                        [3.7354617714881897, 3.808692514896393, 2.7911953902457447, 0.026828441434563578],
                        [3.6881529092788696, 3.86673903465271, 2.745190035183369, 0.027247387327175795],
                        [3.640856921672821, 3.924687445163727, 2.745190035183369, 0.027247387327175795],
                        [3.5935609340667725, 3.9826358556747437, 2.9255793622055606, 0.0257101461638683],
                        [3.546196222305298, 4.041066944599152, 2.9255793622055606, 0.0257101461638683],
                        [3.4988315105438232, 4.09949803352356, 2.9715851474373562, 0.025506164061641485],
                        [3.451191544532776, 4.158448219299316, 2.9715851474373562, 0.025506164061641485],
                        [3.4035515785217285, 4.217398405075073, 0.4403028877837927, 0.16911220076153394],
                        [3.349266290664673, 4.268363952636719, 0.4403028877837927, 0.16911220076153394],
                        [3.294981002807617, 4.319329500198364, 2.7820131890187443, 0.026918860535004738],
                        [3.2314452528953552, 4.358971834182739, 2.7820131890187443, 0.026918860535004738],
                        [3.1679095029830933, 4.398614168167114, 2.966690172915107, 0.024203096496702547],
                        [3.1033254861831665, 4.429992318153381, 2.966690172915107, 0.024203096496702547],
                        [3.0387414693832397, 4.461370468139648, 1.9982444497937621, 0.046875552627083365],
                        [2.9468552470207214, 4.479557514190674, 1.9982444497937621, 0.046875552627083365],
                        [2.854969024658203, 4.497744560241699, 0.6910169890910448, 0.04137671617574601],
                        [2.8264095187187186, 4.496381521224976, 0.6910169890910448, 0.04137671617574601],
                        [2.797850012779234, 4.495018482208252, 2.999904611700885, 0.02742924972700255],
                        [2.7155755162239066, 4.4963414669036865, 2.999904611700885, 0.02742924972700255],
                        [2.633301019668579, 4.497664451599121, 2.0564779796831427, 0.04957018705638553],
                        [2.531361222267151, 4.497866749763489, 2.0564779796831427, 0.04957018705638553],
                        [2.4294214248657227, 4.4980690479278564, 1.1571425509141573, 0.060713870530767544],
                        [2.359214186668396, 4.495489716529846, 1.1571425509141573, 0.060713870530767544],
                        [2.2890069484710693, 4.492910385131836, 1.657609862710838, 0.04363624749316954],
                        [2.216715455055237, 4.4904937744140625, 1.657609862710838, 0.04363624749316954],
                        [2.1444239616394043, 4.488077163696289, 2.4379841226404397, 0.031186965381302462],
                        [2.068418502807617, 4.486018776893616, 2.4379841226404397, 0.031186965381302462],
                        [1.99241304397583, 4.483960390090942, 2.415700014194162, 0.030978135080410207],
                        [1.9176070392131805, 4.481917977333069, 2.415700014194162, 0.030978135080410207],
                        [1.842801034450531, 4.479875564575195, 1.740343147372844, 0.043183596407479326],
                        [1.7676872611045837, 4.477408528327942, 1.740343147372844, 0.043183596407479326],
                        [1.6925734877586365, 4.4749414920806885, 0.42694929470208337, 0.17896776228478634],
                        [1.6162279844284058, 4.471798777580261, 0.42694929470208337, 0.17896776228478634],
                        [1.539882481098175, 4.468656063079834, 2.9975021543653457, 0.025687100124037326],
                        [1.4630757272243506, 4.463244795799255, 2.9975021543653457, 0.025687100124037326],
                        [1.3862689733505262, 4.457833528518677, 1.0322963096671554, 0.07179938036028918],
                        [1.3148179948329932, 4.43812894821167, 1.0322963096671554, 0.07179938036028918],
                        [1.2433670163154602, 4.418424367904663, 2.9988097878555586, 0.024787811078537413],
                        [1.1784637123346329, 4.382187724113464, 2.9988097878555586, 0.024787811078537413],
                        [1.1135604083538055, 4.345951080322266, 2.5458740962120876, 0.029658585253384568],
                        [1.0550347864627847, 4.298242986202241, 2.5458740962121325, 0.029658585253384082],
                        [0.9965091645717638, 4.250534892082216, 2.6766648376153683, 0.028921683262596243],
                        [0.9442935436964044, 4.193382441997529, 2.6766648376152915, 0.0289216832625971],
                        [0.8920779228210449, 4.136229991912842, 0.6965903608579423, 0.11207481504575711],
                        [0.8485814929008484, 4.07139927148819, 0.6965903608579423, 0.11207481504575711],
                        [0.8050850629806519, 4.006568551063538, 2.898654904604852, 0.02585186062258041],
                        [0.7753749564290047, 3.9377742409706116, 2.898654904604852, 0.02585186062258041],
                        [0.7456648498773575, 3.8689799308776855, 0.4228736756271977, 0.17577051199787225],
                        [0.7299025878310205, 3.7963417172431955, 0.42287367562698674, 0.17577051199796095],
                        [0.7141403257846834, 3.723703503608705, 0.17846994874688346, 0.4228260118556427],
                        [0.7106941863894464, 3.648320496082307, 0.17846994874688346, 0.4228260118556451],
                        [0.7072480469942093, 3.572937488555908, 1.82614509354213, 0.040986101188250315],
                        [0.7111022844910622, 3.498190224170685, 1.82614509354213, 0.040986101188250315],
                        [0.714956521987915, 3.4234429597854614, 2.999998782844467, 0.02488664662181309],
                        [0.7257592752575874, 3.349568724632263, 2.999998782844467, 0.02488664662181309],
                        [0.7365620285272598, 3.275694489479065, 1.7818483709875597, 0.042163057492087395],
                        [0.7543131262063982, 3.20269352197647, 1.7818483709875597, 0.042163057492087395],
                        [0.7720642238855366, 3.129692554473875, 1.3677551689701037, 0.05518625930904659],
                        [0.7924884408712389, 3.057027041912078, 1.3677551689701037, 0.05518625930904659],
                        [0.8129126578569412, 2.9843615293502808, 2.5614866502025895, 0.029353257791559485],
                        [0.831171378493309, 2.911424219608307, 2.5614866502025895, 0.029353257791559485],
                        [0.8494300991296768, 2.838486909866333, 1.7812419075001333, 0.042081285849132136],
                        [0.8655199632048607, 2.7652772068977356, 1.7812419075001333, 0.042081285849132136],
                        [0.8816098272800446, 2.692067503929138, 2.9190947748442206, 0.025651322087857573],
                        [0.896785244345665, 2.6187427639961243, 2.9190947748442206, 0.025651322087857573],
                        [0.9119606614112854, 2.5454180240631104, 2.9084003672396044, 0.02574615906942481],
                        [0.9271555542945862, 2.472095787525177, 2.9084003672396044, 0.02574615906942481],
                        [0.942350447177887, 2.3987735509872437, 2.910765665303266, 0.025724957523988953],
                        [0.9575410336256027, 2.3254512548446655, 2.910765665303266, 0.025724957523988953],
                        [0.9727316200733185, 2.2521289587020874, 2.909572590969974, 0.02573561662089322],
                        [0.9879243671894073, 2.178806781768799, 2.909572590969974, 0.02573561662089322],
                        [1.0031171143054962, 2.1054846048355103, 2.9081609456444055, 0.02574893691044219],
                        [1.0183128118515015, 2.0321605801582336, 2.9081609456444055, 0.02574893691044219],
                        [1.0335085093975067, 1.958836555480957, 2.92040997818603, 0.025634705865532015],
                        [1.0486784875392914, 1.885525792837143, 2.92040997818603, 0.025634705865532015],
                        [1.063848465681076, 1.8122150301933289, 2.8981658122968432, 0.025842935247557822],
                        [1.0790641456842422, 1.738879770040512, 2.8981658122968432, 0.025842935247557822],
                        [1.0942798256874084, 1.6655445098876953, 2.761725929070691, 0.027175595936977687],
                        [1.1097063273191452, 1.5920954942703247, 2.761725929070691, 0.027175595936977687],
                        [1.125132828950882, 1.518646478652954, 2.147664253579858, 0.03499834662123],
                        [1.1410594135522842, 1.4451884925365448, 2.147664253579858, 0.03499834662123],
                        [1.1569859981536865, 1.3717305064201355, 0.050091608559073936, 1.4930795586380472],
                        [1.1778385043144226, 1.2999055087566376, 0.050091608559073936, 1.4930795586380472],
                        [1.1986910104751587, 1.2280805110931396, 2.736328278336499, 0.027368521537916624],
                        [1.2259035855531693, 1.1583103388547897, 2.736328278336499, 0.027368521537916624],
                        [1.2531161606311798, 1.0885401666164398, 1.3083239617432343, 0.05683931222220767],
                        [1.2962715774774551, 1.0279790461063385, 1.3083239617432343, 0.05683931222220767],
                        [1.3394269943237305, 0.9674179255962372, 2.1977324007477197, 0.03414583333065659],
                        [1.3897647261619568, 0.911761611700058, 2.1977324007477197, 0.03414583333065659],
                        [1.440102458000183, 0.8561052978038788, 2.7327924580633587, 0.027304330908017857],
                        [1.5060774683952332, 0.8212483748793602, 2.7327924580633587, 0.027304330908017857],
                        [1.5720524787902832, 0.7863914519548416, 2.8881980521365063, 0.025982175735389412],
                        [1.6431847512722015, 0.7624863907694817, 2.8881980521365063, 0.025982175735389412],
                        [1.7143170237541199, 0.7385813295841217, 2.3486419083388146, 0.03225292146222018],
                        [1.7884410321712494, 0.7229679003357887, 2.3486419083388146, 0.03225292146222018],
                        [1.862565040588379, 0.7073544710874557, 0.9843885516608251, 0.07645119939451987],
                        [1.9370554983615875, 0.6966357529163361, 0.9843885516608251, 0.07645119939451987],
                        [2.011545956134796, 0.6859170347452164, 0.1691852766474803, 0.44274376671880855],
                        [2.0862044990062714, 0.6798367500305176, 0.1691852766474803, 0.44274376671880855],
                        [2.1608630418777466, 0.6737564653158188, 1.3496587516455183, 0.055451508742838405],
                        [2.2356897592544556, 0.6723142862319946, 1.3496587516455183, 0.055451508742838405],
                        [2.3105164766311646, 0.6708721071481705, 1.2835401131415787, 0.05844837135757757],
                        [2.3854910135269165, 0.6735071837902069, 1.2835401131415787, 0.05844837135757757],
                        [2.4604655504226685, 0.6761422604322433, 0.6996175581983478, 0.10720432032563865],
                        [2.5354303121566772, 0.6785062029957771, 0.6996175581983478, 0.10720432032563865],
                        [2.610395073890686, 0.6808701455593109, 1.8682214895388767, 0.04010816811833093],
                        [2.685316801071167, 0.6820452213287354, 1.8682214895388767, 0.04010816811833093],
                        [2.760238528251648, 0.6832202970981598, 2.999830971067669, 0.02496081205811935],
                        [2.835116744041443, 0.6832064241170883, 2.999830971067669, 0.02496081205811935],
                        [2.909994959831238, 0.6831925511360168, 2.9368585323438565, 0.0254931437711747],
                        [2.9848642349243164, 0.6829239800572395, 2.9368585323438565, 0.0254931437711747],
                        [3.059733510017395, 0.6826554089784622, 2.9497612327346765, 0.025387843323414917],
                        [3.1346212029457092, 0.6828949451446533, 2.9497612327346765, 0.025387843323414917]]
        ################## INPUT PARAMETERS ###################

        # Read all input parameters
        all_wheels_on_track = params['all_wheels_on_track']
        x = params['x']
        y = params['y']
        distance_from_center = params['distance_from_center']
        is_left_of_center = params['is_left_of_center']
        heading = params['heading']
        progress = params['progress']
        steps = params['steps']
        speed = params['speed']
        steering_angle = params['steering_angle']
        track_width = params['track_width']
        waypoints = params['waypoints']
        closest_waypoints = params['closest_waypoints']
        is_offtrack = params['is_offtrack']

        # Get closest indexes for racing line (and distances to all points on racing line)
        closest_index, second_closest_index = closest_2_racing_points_index(racing_track, [x, y])

        # Get optimal [x, y, speed, time] for closest and second closest index
        optimals = racing_track[closest_index]
        optimals_second = racing_track[second_closest_index]

        # Save first racingpoint of episode for later
        if self.verbose == True:
            self.first_racingpoint_index = 0  # this is just for testing purposes
        if steps == 1:
            self.first_racingpoint_index = closest_index

        ################ REWARD AND PUNISHMENT ################

        ## Define the default reward ##
        reward = 1

        ## Reward if car goes close to optimal racing line ##
        DISTANCE_MULTIPLE = 1
        dist = dist_to_racing_line(optimals[0:2], optimals_second[0:2], [x, y])
        distance_reward = max(1e-3, 1 - (dist / (track_width * 0.5)))
        reward += distance_reward * DISTANCE_MULTIPLE

        ## Reward if speed is close to optimal speed ##
        SPEED_DIFF_NO_REWARD = 1
        SPEED_MULTIPLE = 2
        speed_diff = abs(optimals[2] - speed)
        if speed_diff <= SPEED_DIFF_NO_REWARD:
            # we use quadratic punishment (not linear) bc we're not as confident with the optimal speed
            # so, we do not punish small deviations from optimal speed
            speed_reward = (1 - (speed_diff / (SPEED_DIFF_NO_REWARD)) ** 2) ** 2
        else:
            speed_reward = 0
        reward += speed_reward * SPEED_MULTIPLE

        # Reward if less steps
        REWARD_PER_STEP_FOR_FASTEST_TIME = 1
        STANDARD_TIME = self.track_length / self.standard_speed
        FASTEST_TIME = self.track_length / self.maximum_speed
        times_list = [row[3] for row in racing_track]
        projected_time = projected_time(self.first_racingpoint_index, closest_index, steps, times_list)
        try:
            steps_prediction = projected_time * self.steps_per_second + 1
            reward_prediction = max(1e-3, (-REWARD_PER_STEP_FOR_FASTEST_TIME * (FASTEST_TIME) /
                                           (STANDARD_TIME - FASTEST_TIME)) * (
                                            steps_prediction - (STANDARD_TIME * self.steps_per_second + 1)))
            steps_reward = min(REWARD_PER_STEP_FOR_FASTEST_TIME, reward_prediction / steps_prediction)
        except:
            steps_reward = 0
        reward += steps_reward

        # Zero reward if obviously wrong direction (e.g. spin)
        direction_diff = racing_direction_diff(
            optimals[0:2], optimals_second[0:2], [x, y], heading)
        if direction_diff > 30:
            reward = 1e-3

        # Zero reward of obviously too slow
        speed_diff_zero = optimals[2] - speed
        if speed_diff_zero > 0.5:
            reward = 1e-3

        ## Incentive for finishing the lap in less steps ##
        REWARD_FOR_FASTEST_TIME = 1500  # should be adapted to track length and other rewards
        STANDARD_TIME = self.track_length / self.standard_speed  # seconds (time that is easily done by model)
        FASTEST_TIME = self.track_length / self.maximum_speed  # seconds (best time of 1st place on the track)
        if progress == 100:
            finish_reward = max(1e-3, (-REWARD_FOR_FASTEST_TIME /
                                       (self.steps_per_second * (STANDARD_TIME - FASTEST_TIME))) * (
                                        steps - STANDARD_TIME * self.steps_per_second))
        else:
            finish_reward = 0
        reward += finish_reward

        ## Zero reward if off track ##
        if all_wheels_on_track == False:
            reward = 1e-3

        ####################### VERBOSE #######################

        if self.verbose == True:
            print("Closest index: %i" % closest_index)
            print("Distance to racing line: %f" % dist)
            print("=== Distance reward (w/out multiple): %f ===" % (distance_reward))
            print("Optimal speed: %f" % optimals[2])
            print("Speed difference: %f" % speed_diff)
            print("=== Speed reward (w/out multiple): %f ===" % speed_reward)
            print("Direction difference: %f" % direction_diff)
            print("Predicted time: %f" % projected_time)
            print("=== Steps reward: %f ===" % steps_reward)
            print("=== Finish reward: %f ===" % finish_reward)

        #################### RETURN REWARD ####################

        # Always return a float value
        return float(reward)


reward_object = Reward()  # add parameter verbose=True to get noisy output for testing


def reward_function(params):
    return reward_object.reward_function(params)
